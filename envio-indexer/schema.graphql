type RelayerRegistry_EmergencySlash {
  id: ID!
  relayer: String!
  amount: BigInt!
  reason: String!
}

type RelayerRegistry_ExecutionRecorded {
  id: ID!
  relayer: String!
  success: Boolean!
  feeAmount: BigInt!
}

type RelayerRegistry_OwnershipTransferred {
  id: ID!
  previousOwner: String!
  newOwner: String!
}

type RelayerRegistry_RelayerRegistered {
  id: ID!
  relayer: String!
  stakedAmount: BigInt!
}

type RelayerRegistry_RelayerRestaked {
  id: ID!
  relayer: String!
  amount: BigInt!
  newStake: BigInt!
}

type RelayerRegistry_RelayerSlashed {
  id: ID!
  relayer: String!
  slashAmount: BigInt!
  remainingStake: BigInt!
}

type RelayerRegistry_RelayerUnregistered {
  id: ID!
  relayer: String!
  returnedStake: BigInt!
}

type RelayerRegistry_SlashingParametersUpdated {
  id: ID!
  slashAmount: BigInt!
  failureThreshold: BigInt!
}

type RelayerRegistry_WithdrawalRequested {
  id: ID!
  relayer: String!
  requestTime: BigInt!
}

type SubscribtionManager_CrossChainPaymentInitiated {
  id: ID!
  subscriptionId: String!
  subscriber: String!
  subscriberToken: String!
  sourceChainId: BigInt!
  targetChainId: BigInt!
  amount: BigInt!
}

type SubscribtionManager_NexusAttestationSubmitted {
  id: ID!
  subscriptionId: String!
  paymentNumber: BigInt!
  attestationId: String!
}

type SubscribtionManager_NexusAttestationVerified {
  id: ID!
  attestationId: String!
}

type SubscribtionManager_OwnershipTransferred {
  id: ID!
  previousOwner: String!
  newOwner: String!
}

type SubscribtionManager_PaymentExecuted {
  id: ID!
  subscriptionId: String!
  subscriber: String!
  merchant: String!
  token: String!
  paymentNumber: BigInt!
  amount: BigInt!
  fee: BigInt!
  relayer: String!
}

type SubscribtionManager_PaymentFailed {
  id: ID!
  subscriptionId: String!
  subscriber: String!
  merchant: String!
  amount: BigInt!
  reason: String!
}

type SubscribtionManager_SubscriptionCancelled {
  id: ID!
  subscriptionId: String!
  subscriber: String!
  merchant: String!
}

type SubscribtionManager_SubscriptionCreated {
  id: ID!
  subscriptionId: String!
  subscriber: String!
  merchant: String!
  token: String!
  amount: BigInt!
  interval: BigInt!
  maxPayments: BigInt!
  maxTotalAmount: BigInt!
  expiry: BigInt!
}

type SubscribtionManager_SubscriptionPaused {
  id: ID!
  subscriptionId: String!
  subscriber: String!
}

type SubscribtionManager_SubscriptionResumed {
  id: ID!
  subscriptionId: String!
  subscriber: String!
}

type SubscribtionManager_TokenAdded {
  id: ID!
  token: String!
}

type SubscribtionManager_TokenRemoved {
  id: ID!
  token: String!
}

type MerchantTokenStats {
  id: ID!
  merchant: String!
  token: String!
  tokenSymbol: String!
  chainId: BigInt!
  totalSubscriptions: BigInt!
  activeSubscriptions: BigInt!
  totalRevenue: BigInt!
  totalPayments: BigInt!
  averageTransactionValue: BigInt!
}

type Payment {
  id: ID!
  subscriptionId: String!
  paymentNumber: BigInt!
  amount: BigInt!
  fee: BigInt!
  relayer: String!
  txHash: String!
  blockNumber: BigInt!
  timestamp: BigInt!
  chainId: BigInt!
  merchant: String!
  subscriber: String!
  token: String!
  tokenSymbol: String!
  nexusAttestationId: String
  nexusVerified: Boolean!
}

type Subscription {
  id: ID!
  subscriptionId: String!
  subscriber: String!
  merchant: String!
  token: String!
  tokenSymbol: String!
  amount: BigInt!
  interval: BigInt!
  maxPayments: BigInt!
  maxTotalAmount: BigInt!
  expiry: BigInt!
  chainId: BigInt!
  status: String!
  createdAt: BigInt!
  startTime: BigInt!
  paymentsExecuted: BigInt!
  totalAmountPaid: BigInt!
  createdAtBlock: BigInt!
}

type CrossChainAttestation {
  id: ID!
  attestationId: String!
  subscriptionId: String!
  paymentNumber: BigInt!
  chainId: BigInt!
  token: String
  amount: BigInt
  verified: Boolean!
  timestamp: BigInt!
}
