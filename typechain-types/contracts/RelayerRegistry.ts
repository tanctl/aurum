/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface RelayerRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MINIMUM_STAKE"
      | "PYUSD_ADDRESS"
      | "WITHDRAWAL_DELAY"
      | "getRelayerStats"
      | "isRelayerActive"
      | "owner"
      | "recordExecution"
      | "registerRelayer"
      | "relayers"
      | "renounceOwnership"
      | "requestWithdrawal"
      | "setSubscriptionManager"
      | "subscriptionManager"
      | "transferOwnership"
      | "unregisterRelayer"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ExecutionRecorded"
      | "OwnershipTransferred"
      | "RelayerRegistered"
      | "RelayerUnregistered"
      | "WithdrawalRequested"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MINIMUM_STAKE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PYUSD_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WITHDRAWAL_DELAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRelayerStats",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRelayerActive",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recordExecution",
    values: [AddressLike, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerRelayer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "relayers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestWithdrawal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setSubscriptionManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterRelayer",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "MINIMUM_STAKE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PYUSD_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WITHDRAWAL_DELAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRelayerStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRelayerActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recordExecution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "relayers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSubscriptionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterRelayer",
    data: BytesLike
  ): Result;
}

export namespace ExecutionRecordedEvent {
  export type InputTuple = [
    relayer: AddressLike,
    success: boolean,
    feeAmount: BigNumberish
  ];
  export type OutputTuple = [
    relayer: string,
    success: boolean,
    feeAmount: bigint
  ];
  export interface OutputObject {
    relayer: string;
    success: boolean;
    feeAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RelayerRegisteredEvent {
  export type InputTuple = [relayer: AddressLike, stakedAmount: BigNumberish];
  export type OutputTuple = [relayer: string, stakedAmount: bigint];
  export interface OutputObject {
    relayer: string;
    stakedAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RelayerUnregisteredEvent {
  export type InputTuple = [relayer: AddressLike, returnedStake: BigNumberish];
  export type OutputTuple = [relayer: string, returnedStake: bigint];
  export interface OutputObject {
    relayer: string;
    returnedStake: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalRequestedEvent {
  export type InputTuple = [relayer: AddressLike, requestTime: BigNumberish];
  export type OutputTuple = [relayer: string, requestTime: bigint];
  export interface OutputObject {
    relayer: string;
    requestTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RelayerRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): RelayerRegistry;
  waitForDeployment(): Promise<this>;

  interface: RelayerRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MINIMUM_STAKE: TypedContractMethod<[], [bigint], "view">;

  PYUSD_ADDRESS: TypedContractMethod<[], [string], "view">;

  WITHDRAWAL_DELAY: TypedContractMethod<[], [bigint], "view">;

  getRelayerStats: TypedContractMethod<
    [relayerAddress: AddressLike],
    [
      [bigint, bigint, bigint, bigint, boolean] & {
        stakedAmount: bigint;
        successfulExecutions: bigint;
        failedExecutions: bigint;
        totalFeesEarned: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  isRelayerActive: TypedContractMethod<
    [relayerAddress: AddressLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  recordExecution: TypedContractMethod<
    [relayerAddress: AddressLike, success: boolean, feeAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  registerRelayer: TypedContractMethod<
    [stakeAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  relayers: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, boolean, bigint, boolean] & {
        stakedAmount: bigint;
        successfulExecutions: bigint;
        failedExecutions: bigint;
        totalFeesEarned: bigint;
        isActive: boolean;
        withdrawalRequestTime: bigint;
        withdrawalRequested: boolean;
      }
    ],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  requestWithdrawal: TypedContractMethod<[], [void], "nonpayable">;

  setSubscriptionManager: TypedContractMethod<
    [_subscriptionManager: AddressLike],
    [void],
    "nonpayable"
  >;

  subscriptionManager: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unregisterRelayer: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MINIMUM_STAKE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PYUSD_ADDRESS"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "WITHDRAWAL_DELAY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRelayerStats"
  ): TypedContractMethod<
    [relayerAddress: AddressLike],
    [
      [bigint, bigint, bigint, bigint, boolean] & {
        stakedAmount: bigint;
        successfulExecutions: bigint;
        failedExecutions: bigint;
        totalFeesEarned: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isRelayerActive"
  ): TypedContractMethod<[relayerAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "recordExecution"
  ): TypedContractMethod<
    [relayerAddress: AddressLike, success: boolean, feeAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerRelayer"
  ): TypedContractMethod<[stakeAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "relayers"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, boolean, bigint, boolean] & {
        stakedAmount: bigint;
        successfulExecutions: bigint;
        failedExecutions: bigint;
        totalFeesEarned: bigint;
        isActive: boolean;
        withdrawalRequestTime: bigint;
        withdrawalRequested: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestWithdrawal"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSubscriptionManager"
  ): TypedContractMethod<
    [_subscriptionManager: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "subscriptionManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unregisterRelayer"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "ExecutionRecorded"
  ): TypedContractEvent<
    ExecutionRecordedEvent.InputTuple,
    ExecutionRecordedEvent.OutputTuple,
    ExecutionRecordedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RelayerRegistered"
  ): TypedContractEvent<
    RelayerRegisteredEvent.InputTuple,
    RelayerRegisteredEvent.OutputTuple,
    RelayerRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "RelayerUnregistered"
  ): TypedContractEvent<
    RelayerUnregisteredEvent.InputTuple,
    RelayerUnregisteredEvent.OutputTuple,
    RelayerUnregisteredEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawalRequested"
  ): TypedContractEvent<
    WithdrawalRequestedEvent.InputTuple,
    WithdrawalRequestedEvent.OutputTuple,
    WithdrawalRequestedEvent.OutputObject
  >;

  filters: {
    "ExecutionRecorded(address,bool,uint256)": TypedContractEvent<
      ExecutionRecordedEvent.InputTuple,
      ExecutionRecordedEvent.OutputTuple,
      ExecutionRecordedEvent.OutputObject
    >;
    ExecutionRecorded: TypedContractEvent<
      ExecutionRecordedEvent.InputTuple,
      ExecutionRecordedEvent.OutputTuple,
      ExecutionRecordedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RelayerRegistered(address,uint256)": TypedContractEvent<
      RelayerRegisteredEvent.InputTuple,
      RelayerRegisteredEvent.OutputTuple,
      RelayerRegisteredEvent.OutputObject
    >;
    RelayerRegistered: TypedContractEvent<
      RelayerRegisteredEvent.InputTuple,
      RelayerRegisteredEvent.OutputTuple,
      RelayerRegisteredEvent.OutputObject
    >;

    "RelayerUnregistered(address,uint256)": TypedContractEvent<
      RelayerUnregisteredEvent.InputTuple,
      RelayerUnregisteredEvent.OutputTuple,
      RelayerUnregisteredEvent.OutputObject
    >;
    RelayerUnregistered: TypedContractEvent<
      RelayerUnregisteredEvent.InputTuple,
      RelayerUnregisteredEvent.OutputTuple,
      RelayerUnregisteredEvent.OutputObject
    >;

    "WithdrawalRequested(address,uint256)": TypedContractEvent<
      WithdrawalRequestedEvent.InputTuple,
      WithdrawalRequestedEvent.OutputTuple,
      WithdrawalRequestedEvent.OutputObject
    >;
    WithdrawalRequested: TypedContractEvent<
      WithdrawalRequestedEvent.InputTuple,
      WithdrawalRequestedEvent.OutputTuple,
      WithdrawalRequestedEvent.OutputObject
    >;
  };
}
