/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace RelayerRegistry {
  export type RelayerStruct = {
    stakedAmount: BigNumberish;
    successfulExecutions: BigNumberish;
    failedExecutions: BigNumberish;
    totalFeesEarned: BigNumberish;
    withdrawalRequestTime: BigNumberish;
    isActive: boolean;
    withdrawalRequested: boolean;
  };

  export type RelayerStructOutput = [
    stakedAmount: bigint,
    successfulExecutions: bigint,
    failedExecutions: bigint,
    totalFeesEarned: bigint,
    withdrawalRequestTime: bigint,
    isActive: boolean,
    withdrawalRequested: boolean
  ] & {
    stakedAmount: bigint;
    successfulExecutions: bigint;
    failedExecutions: bigint;
    totalFeesEarned: bigint;
    withdrawalRequestTime: bigint;
    isActive: boolean;
    withdrawalRequested: boolean;
  };
}

export interface RelayerRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CONSECUTIVE_FAILURES_THRESHOLD"
      | "MINIMUM_STAKE"
      | "PYUSD_ADDRESS"
      | "SLASHING_COOLDOWN"
      | "SLASH_AMOUNT"
      | "WITHDRAWAL_DELAY"
      | "canExecute"
      | "consecutiveFailures"
      | "emergencySlash"
      | "emergencyUnslash"
      | "failureThresholdConfig"
      | "getConsecutiveFailures"
      | "getRelayerInfo"
      | "getRelayerStats"
      | "getTimeUntilSlashCooldown"
      | "isRelayerActive"
      | "isSlashed"
      | "lastSlashTime"
      | "owner"
      | "recordExecution"
      | "registerRelayer"
      | "relayers"
      | "renounceOwnership"
      | "requestWithdrawal"
      | "restakeAfterSlash"
      | "setSubscriptionManager"
      | "slashAmountConfig"
      | "subscriptionManager"
      | "transferOwnership"
      | "unregisterRelayer"
      | "updateSlashingParameters"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EmergencySlash"
      | "ExecutionRecorded"
      | "OwnershipTransferred"
      | "RelayerRegistered"
      | "RelayerRestaked"
      | "RelayerSlashed"
      | "RelayerUnregistered"
      | "SlashingParametersUpdated"
      | "WithdrawalRequested"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CONSECUTIVE_FAILURES_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINIMUM_STAKE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PYUSD_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SLASHING_COOLDOWN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SLASH_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WITHDRAWAL_DELAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canExecute",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "consecutiveFailures",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencySlash",
    values: [AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyUnslash",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "failureThresholdConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getConsecutiveFailures",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRelayerInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRelayerStats",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimeUntilSlashCooldown",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRelayerActive",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isSlashed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastSlashTime",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recordExecution",
    values: [AddressLike, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerRelayer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "relayers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestWithdrawal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "restakeAfterSlash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSubscriptionManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "slashAmountConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterRelayer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateSlashingParameters",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "CONSECUTIVE_FAILURES_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINIMUM_STAKE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PYUSD_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SLASHING_COOLDOWN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SLASH_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WITHDRAWAL_DELAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canExecute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "consecutiveFailures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencySlash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyUnslash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "failureThresholdConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConsecutiveFailures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRelayerInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRelayerStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimeUntilSlashCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRelayerActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isSlashed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastSlashTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recordExecution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "relayers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "restakeAfterSlash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSubscriptionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slashAmountConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSlashingParameters",
    data: BytesLike
  ): Result;
}

export namespace EmergencySlashEvent {
  export type InputTuple = [
    relayer: AddressLike,
    amount: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [relayer: string, amount: bigint, reason: string];
  export interface OutputObject {
    relayer: string;
    amount: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecutionRecordedEvent {
  export type InputTuple = [
    relayer: AddressLike,
    success: boolean,
    feeAmount: BigNumberish
  ];
  export type OutputTuple = [
    relayer: string,
    success: boolean,
    feeAmount: bigint
  ];
  export interface OutputObject {
    relayer: string;
    success: boolean;
    feeAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RelayerRegisteredEvent {
  export type InputTuple = [relayer: AddressLike, stakedAmount: BigNumberish];
  export type OutputTuple = [relayer: string, stakedAmount: bigint];
  export interface OutputObject {
    relayer: string;
    stakedAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RelayerRestakedEvent {
  export type InputTuple = [
    relayer: AddressLike,
    amount: BigNumberish,
    newStake: BigNumberish
  ];
  export type OutputTuple = [relayer: string, amount: bigint, newStake: bigint];
  export interface OutputObject {
    relayer: string;
    amount: bigint;
    newStake: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RelayerSlashedEvent {
  export type InputTuple = [
    relayer: AddressLike,
    slashAmount: BigNumberish,
    remainingStake: BigNumberish
  ];
  export type OutputTuple = [
    relayer: string,
    slashAmount: bigint,
    remainingStake: bigint
  ];
  export interface OutputObject {
    relayer: string;
    slashAmount: bigint;
    remainingStake: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RelayerUnregisteredEvent {
  export type InputTuple = [relayer: AddressLike, returnedStake: BigNumberish];
  export type OutputTuple = [relayer: string, returnedStake: bigint];
  export interface OutputObject {
    relayer: string;
    returnedStake: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SlashingParametersUpdatedEvent {
  export type InputTuple = [
    slashAmount: BigNumberish,
    failureThreshold: BigNumberish
  ];
  export type OutputTuple = [slashAmount: bigint, failureThreshold: bigint];
  export interface OutputObject {
    slashAmount: bigint;
    failureThreshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalRequestedEvent {
  export type InputTuple = [relayer: AddressLike, requestTime: BigNumberish];
  export type OutputTuple = [relayer: string, requestTime: bigint];
  export interface OutputObject {
    relayer: string;
    requestTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RelayerRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): RelayerRegistry;
  waitForDeployment(): Promise<this>;

  interface: RelayerRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CONSECUTIVE_FAILURES_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  MINIMUM_STAKE: TypedContractMethod<[], [bigint], "view">;

  PYUSD_ADDRESS: TypedContractMethod<[], [string], "view">;

  SLASHING_COOLDOWN: TypedContractMethod<[], [bigint], "view">;

  SLASH_AMOUNT: TypedContractMethod<[], [bigint], "view">;

  WITHDRAWAL_DELAY: TypedContractMethod<[], [bigint], "view">;

  canExecute: TypedContractMethod<
    [relayerAddress: AddressLike],
    [boolean],
    "view"
  >;

  consecutiveFailures: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  emergencySlash: TypedContractMethod<
    [relayerAddress: AddressLike, amount: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;

  emergencyUnslash: TypedContractMethod<
    [relayerAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  failureThresholdConfig: TypedContractMethod<[], [bigint], "view">;

  getConsecutiveFailures: TypedContractMethod<
    [relayerAddress: AddressLike],
    [bigint],
    "view"
  >;

  getRelayerInfo: TypedContractMethod<
    [relayerAddress: AddressLike],
    [RelayerRegistry.RelayerStructOutput],
    "view"
  >;

  getRelayerStats: TypedContractMethod<
    [relayerAddress: AddressLike],
    [
      [bigint, bigint, bigint, bigint, boolean] & {
        stakedAmount: bigint;
        successfulExecutions: bigint;
        failedExecutions: bigint;
        totalFeesEarned: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  getTimeUntilSlashCooldown: TypedContractMethod<
    [relayerAddress: AddressLike],
    [bigint],
    "view"
  >;

  isRelayerActive: TypedContractMethod<
    [relayerAddress: AddressLike],
    [boolean],
    "view"
  >;

  isSlashed: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  lastSlashTime: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  recordExecution: TypedContractMethod<
    [relayerAddress: AddressLike, success: boolean, feeAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  registerRelayer: TypedContractMethod<
    [stakeAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  relayers: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean, boolean] & {
        stakedAmount: bigint;
        successfulExecutions: bigint;
        failedExecutions: bigint;
        totalFeesEarned: bigint;
        withdrawalRequestTime: bigint;
        isActive: boolean;
        withdrawalRequested: boolean;
      }
    ],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  requestWithdrawal: TypedContractMethod<[], [void], "nonpayable">;

  restakeAfterSlash: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setSubscriptionManager: TypedContractMethod<
    [_subscriptionManager: AddressLike],
    [void],
    "nonpayable"
  >;

  slashAmountConfig: TypedContractMethod<[], [bigint], "view">;

  subscriptionManager: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unregisterRelayer: TypedContractMethod<[], [void], "nonpayable">;

  updateSlashingParameters: TypedContractMethod<
    [slashAmount: BigNumberish, failureThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CONSECUTIVE_FAILURES_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MINIMUM_STAKE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PYUSD_ADDRESS"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SLASHING_COOLDOWN"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SLASH_AMOUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WITHDRAWAL_DELAY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "canExecute"
  ): TypedContractMethod<[relayerAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "consecutiveFailures"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "emergencySlash"
  ): TypedContractMethod<
    [relayerAddress: AddressLike, amount: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyUnslash"
  ): TypedContractMethod<[relayerAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "failureThresholdConfig"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getConsecutiveFailures"
  ): TypedContractMethod<[relayerAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRelayerInfo"
  ): TypedContractMethod<
    [relayerAddress: AddressLike],
    [RelayerRegistry.RelayerStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRelayerStats"
  ): TypedContractMethod<
    [relayerAddress: AddressLike],
    [
      [bigint, bigint, bigint, bigint, boolean] & {
        stakedAmount: bigint;
        successfulExecutions: bigint;
        failedExecutions: bigint;
        totalFeesEarned: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTimeUntilSlashCooldown"
  ): TypedContractMethod<[relayerAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "isRelayerActive"
  ): TypedContractMethod<[relayerAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isSlashed"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "lastSlashTime"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "recordExecution"
  ): TypedContractMethod<
    [relayerAddress: AddressLike, success: boolean, feeAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerRelayer"
  ): TypedContractMethod<[stakeAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "relayers"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean, boolean] & {
        stakedAmount: bigint;
        successfulExecutions: bigint;
        failedExecutions: bigint;
        totalFeesEarned: bigint;
        withdrawalRequestTime: bigint;
        isActive: boolean;
        withdrawalRequested: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestWithdrawal"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "restakeAfterSlash"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSubscriptionManager"
  ): TypedContractMethod<
    [_subscriptionManager: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "slashAmountConfig"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "subscriptionManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unregisterRelayer"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateSlashingParameters"
  ): TypedContractMethod<
    [slashAmount: BigNumberish, failureThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "EmergencySlash"
  ): TypedContractEvent<
    EmergencySlashEvent.InputTuple,
    EmergencySlashEvent.OutputTuple,
    EmergencySlashEvent.OutputObject
  >;
  getEvent(
    key: "ExecutionRecorded"
  ): TypedContractEvent<
    ExecutionRecordedEvent.InputTuple,
    ExecutionRecordedEvent.OutputTuple,
    ExecutionRecordedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RelayerRegistered"
  ): TypedContractEvent<
    RelayerRegisteredEvent.InputTuple,
    RelayerRegisteredEvent.OutputTuple,
    RelayerRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "RelayerRestaked"
  ): TypedContractEvent<
    RelayerRestakedEvent.InputTuple,
    RelayerRestakedEvent.OutputTuple,
    RelayerRestakedEvent.OutputObject
  >;
  getEvent(
    key: "RelayerSlashed"
  ): TypedContractEvent<
    RelayerSlashedEvent.InputTuple,
    RelayerSlashedEvent.OutputTuple,
    RelayerSlashedEvent.OutputObject
  >;
  getEvent(
    key: "RelayerUnregistered"
  ): TypedContractEvent<
    RelayerUnregisteredEvent.InputTuple,
    RelayerUnregisteredEvent.OutputTuple,
    RelayerUnregisteredEvent.OutputObject
  >;
  getEvent(
    key: "SlashingParametersUpdated"
  ): TypedContractEvent<
    SlashingParametersUpdatedEvent.InputTuple,
    SlashingParametersUpdatedEvent.OutputTuple,
    SlashingParametersUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawalRequested"
  ): TypedContractEvent<
    WithdrawalRequestedEvent.InputTuple,
    WithdrawalRequestedEvent.OutputTuple,
    WithdrawalRequestedEvent.OutputObject
  >;

  filters: {
    "EmergencySlash(address,uint256,string)": TypedContractEvent<
      EmergencySlashEvent.InputTuple,
      EmergencySlashEvent.OutputTuple,
      EmergencySlashEvent.OutputObject
    >;
    EmergencySlash: TypedContractEvent<
      EmergencySlashEvent.InputTuple,
      EmergencySlashEvent.OutputTuple,
      EmergencySlashEvent.OutputObject
    >;

    "ExecutionRecorded(address,bool,uint256)": TypedContractEvent<
      ExecutionRecordedEvent.InputTuple,
      ExecutionRecordedEvent.OutputTuple,
      ExecutionRecordedEvent.OutputObject
    >;
    ExecutionRecorded: TypedContractEvent<
      ExecutionRecordedEvent.InputTuple,
      ExecutionRecordedEvent.OutputTuple,
      ExecutionRecordedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RelayerRegistered(address,uint256)": TypedContractEvent<
      RelayerRegisteredEvent.InputTuple,
      RelayerRegisteredEvent.OutputTuple,
      RelayerRegisteredEvent.OutputObject
    >;
    RelayerRegistered: TypedContractEvent<
      RelayerRegisteredEvent.InputTuple,
      RelayerRegisteredEvent.OutputTuple,
      RelayerRegisteredEvent.OutputObject
    >;

    "RelayerRestaked(address,uint256,uint256)": TypedContractEvent<
      RelayerRestakedEvent.InputTuple,
      RelayerRestakedEvent.OutputTuple,
      RelayerRestakedEvent.OutputObject
    >;
    RelayerRestaked: TypedContractEvent<
      RelayerRestakedEvent.InputTuple,
      RelayerRestakedEvent.OutputTuple,
      RelayerRestakedEvent.OutputObject
    >;

    "RelayerSlashed(address,uint256,uint256)": TypedContractEvent<
      RelayerSlashedEvent.InputTuple,
      RelayerSlashedEvent.OutputTuple,
      RelayerSlashedEvent.OutputObject
    >;
    RelayerSlashed: TypedContractEvent<
      RelayerSlashedEvent.InputTuple,
      RelayerSlashedEvent.OutputTuple,
      RelayerSlashedEvent.OutputObject
    >;

    "RelayerUnregistered(address,uint256)": TypedContractEvent<
      RelayerUnregisteredEvent.InputTuple,
      RelayerUnregisteredEvent.OutputTuple,
      RelayerUnregisteredEvent.OutputObject
    >;
    RelayerUnregistered: TypedContractEvent<
      RelayerUnregisteredEvent.InputTuple,
      RelayerUnregisteredEvent.OutputTuple,
      RelayerUnregisteredEvent.OutputObject
    >;

    "SlashingParametersUpdated(uint256,uint256)": TypedContractEvent<
      SlashingParametersUpdatedEvent.InputTuple,
      SlashingParametersUpdatedEvent.OutputTuple,
      SlashingParametersUpdatedEvent.OutputObject
    >;
    SlashingParametersUpdated: TypedContractEvent<
      SlashingParametersUpdatedEvent.InputTuple,
      SlashingParametersUpdatedEvent.OutputTuple,
      SlashingParametersUpdatedEvent.OutputObject
    >;

    "WithdrawalRequested(address,uint256)": TypedContractEvent<
      WithdrawalRequestedEvent.InputTuple,
      WithdrawalRequestedEvent.OutputTuple,
      WithdrawalRequestedEvent.OutputObject
    >;
    WithdrawalRequested: TypedContractEvent<
      WithdrawalRequestedEvent.InputTuple,
      WithdrawalRequestedEvent.OutputTuple,
      WithdrawalRequestedEvent.OutputObject
    >;
  };
}
