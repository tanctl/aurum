/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace SubscriptionManager {
  export type SubscriptionIntentStruct = {
    subscriber: AddressLike;
    merchant: AddressLike;
    amount: BigNumberish;
    interval: BigNumberish;
    startTime: BigNumberish;
    maxPayments: BigNumberish;
    maxTotalAmount: BigNumberish;
    expiry: BigNumberish;
    nonce: BigNumberish;
    token: AddressLike;
  };

  export type SubscriptionIntentStructOutput = [
    subscriber: string,
    merchant: string,
    amount: bigint,
    interval: bigint,
    startTime: bigint,
    maxPayments: bigint,
    maxTotalAmount: bigint,
    expiry: bigint,
    nonce: bigint,
    token: string
  ] & {
    subscriber: string;
    merchant: string;
    amount: bigint;
    interval: bigint;
    startTime: bigint;
    maxPayments: bigint;
    maxTotalAmount: bigint;
    expiry: bigint;
    nonce: bigint;
    token: string;
  };

  export type SubscriptionStruct = {
    subscriber: AddressLike;
    merchant: AddressLike;
    amount: BigNumberish;
    interval: BigNumberish;
    startTime: BigNumberish;
    maxPayments: BigNumberish;
    maxTotalAmount: BigNumberish;
    expiry: BigNumberish;
    nonce: BigNumberish;
    token: AddressLike;
    status: BigNumberish;
  };

  export type SubscriptionStructOutput = [
    subscriber: string,
    merchant: string,
    amount: bigint,
    interval: bigint,
    startTime: bigint,
    maxPayments: bigint,
    maxTotalAmount: bigint,
    expiry: bigint,
    nonce: bigint,
    token: string,
    status: bigint
  ] & {
    subscriber: string;
    merchant: string;
    amount: bigint;
    interval: bigint;
    startTime: bigint;
    maxPayments: bigint;
    maxTotalAmount: bigint;
    expiry: bigint;
    nonce: bigint;
    token: string;
    status: bigint;
  };
}

export interface SubscriptionManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "PAUSE_REQUEST_TYPEHASH"
      | "PROTOCOL_FEE_BPS"
      | "RELAYER_REGISTRY"
      | "RESUME_REQUEST_TYPEHASH"
      | "SUBSCRIPTION_INTENT_TYPEHASH"
      | "activeSubscriptionCounts"
      | "addSupportedToken"
      | "cancelSubscription"
      | "createSubscription"
      | "currentNonce"
      | "depositForSubscription"
      | "ethDeposits"
      | "executeSubscription"
      | "executedPayments"
      | "getNextNonce"
      | "getNextPaymentTime"
      | "getPaymentCount"
      | "getSubscription"
      | "getSubscriptionToken"
      | "getSupportedTokens"
      | "isSubscriptionActive"
      | "owner"
      | "pauseSubscription"
      | "removeSupportedToken"
      | "renounceOwnership"
      | "resumeSubscription"
      | "subscriptionToken"
      | "subscriptions"
      | "supportedTokens"
      | "transferOwnership"
      | "verifyIntent"
      | "withdrawUnusedETH"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "PaymentExecuted"
      | "PaymentFailed"
      | "SubscriptionCancelled"
      | "SubscriptionCreated"
      | "SubscriptionPaused"
      | "SubscriptionResumed"
      | "TokenAdded"
      | "TokenRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "PAUSE_REQUEST_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROTOCOL_FEE_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RELAYER_REGISTRY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RESUME_REQUEST_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SUBSCRIPTION_INTENT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activeSubscriptionCounts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addSupportedToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelSubscription",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createSubscription",
    values: [SubscriptionManager.SubscriptionIntentStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "currentNonce",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositForSubscription",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ethDeposits",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeSubscription",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executedPayments",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextNonce",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextPaymentTime",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaymentCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscription",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscriptionToken",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isSubscriptionActive",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseSubscription",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSupportedToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resumeSubscription",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionToken",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptions",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyIntent",
    values: [SubscriptionManager.SubscriptionIntentStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawUnusedETH",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "PAUSE_REQUEST_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROTOCOL_FEE_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RELAYER_REGISTRY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RESUME_REQUEST_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SUBSCRIPTION_INTENT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeSubscriptionCounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSupportedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositForSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ethDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executedPayments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextPaymentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscriptionToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSubscriptionActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSupportedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resumeSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyIntent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawUnusedETH",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentExecutedEvent {
  export type InputTuple = [
    subscriptionId: BytesLike,
    subscriber: AddressLike,
    merchant: AddressLike,
    token: AddressLike,
    paymentNumber: BigNumberish,
    amount: BigNumberish,
    fee: BigNumberish,
    relayer: AddressLike
  ];
  export type OutputTuple = [
    subscriptionId: string,
    subscriber: string,
    merchant: string,
    token: string,
    paymentNumber: bigint,
    amount: bigint,
    fee: bigint,
    relayer: string
  ];
  export interface OutputObject {
    subscriptionId: string;
    subscriber: string;
    merchant: string;
    token: string;
    paymentNumber: bigint;
    amount: bigint;
    fee: bigint;
    relayer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentFailedEvent {
  export type InputTuple = [
    subscriptionId: BytesLike,
    subscriber: AddressLike,
    merchant: AddressLike,
    amount: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [
    subscriptionId: string,
    subscriber: string,
    merchant: string,
    amount: bigint,
    reason: string
  ];
  export interface OutputObject {
    subscriptionId: string;
    subscriber: string;
    merchant: string;
    amount: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionCancelledEvent {
  export type InputTuple = [
    subscriptionId: BytesLike,
    subscriber: AddressLike,
    merchant: AddressLike
  ];
  export type OutputTuple = [
    subscriptionId: string,
    subscriber: string,
    merchant: string
  ];
  export interface OutputObject {
    subscriptionId: string;
    subscriber: string;
    merchant: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionCreatedEvent {
  export type InputTuple = [
    subscriptionId: BytesLike,
    subscriber: AddressLike,
    merchant: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    interval: BigNumberish,
    maxPayments: BigNumberish,
    maxTotalAmount: BigNumberish,
    expiry: BigNumberish
  ];
  export type OutputTuple = [
    subscriptionId: string,
    subscriber: string,
    merchant: string,
    token: string,
    amount: bigint,
    interval: bigint,
    maxPayments: bigint,
    maxTotalAmount: bigint,
    expiry: bigint
  ];
  export interface OutputObject {
    subscriptionId: string;
    subscriber: string;
    merchant: string;
    token: string;
    amount: bigint;
    interval: bigint;
    maxPayments: bigint;
    maxTotalAmount: bigint;
    expiry: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionPausedEvent {
  export type InputTuple = [subscriptionId: BytesLike, subscriber: AddressLike];
  export type OutputTuple = [subscriptionId: string, subscriber: string];
  export interface OutputObject {
    subscriptionId: string;
    subscriber: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionResumedEvent {
  export type InputTuple = [subscriptionId: BytesLike, subscriber: AddressLike];
  export type OutputTuple = [subscriptionId: string, subscriber: string];
  export interface OutputObject {
    subscriptionId: string;
    subscriber: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenAddedEvent {
  export type InputTuple = [token: AddressLike];
  export type OutputTuple = [token: string];
  export interface OutputObject {
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenRemovedEvent {
  export type InputTuple = [token: AddressLike];
  export type OutputTuple = [token: string];
  export interface OutputObject {
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SubscriptionManager extends BaseContract {
  connect(runner?: ContractRunner | null): SubscriptionManager;
  waitForDeployment(): Promise<this>;

  interface: SubscriptionManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  PAUSE_REQUEST_TYPEHASH: TypedContractMethod<[], [string], "view">;

  PROTOCOL_FEE_BPS: TypedContractMethod<[], [bigint], "view">;

  RELAYER_REGISTRY: TypedContractMethod<[], [string], "view">;

  RESUME_REQUEST_TYPEHASH: TypedContractMethod<[], [string], "view">;

  SUBSCRIPTION_INTENT_TYPEHASH: TypedContractMethod<[], [string], "view">;

  activeSubscriptionCounts: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  addSupportedToken: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  cancelSubscription: TypedContractMethod<
    [subscriptionId: BytesLike],
    [void],
    "nonpayable"
  >;

  createSubscription: TypedContractMethod<
    [
      intent: SubscriptionManager.SubscriptionIntentStruct,
      signature: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  currentNonce: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  depositForSubscription: TypedContractMethod<
    [subscriptionId: BytesLike],
    [void],
    "payable"
  >;

  ethDeposits: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  executeSubscription: TypedContractMethod<
    [subscriptionId: BytesLike, relayer: AddressLike],
    [void],
    "nonpayable"
  >;

  executedPayments: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  getNextNonce: TypedContractMethod<
    [_subscriber: AddressLike],
    [bigint],
    "view"
  >;

  getNextPaymentTime: TypedContractMethod<
    [subscriptionId: BytesLike],
    [bigint],
    "view"
  >;

  getPaymentCount: TypedContractMethod<
    [subscriptionId: BytesLike],
    [bigint],
    "view"
  >;

  getSubscription: TypedContractMethod<
    [subscriptionId: BytesLike],
    [SubscriptionManager.SubscriptionStructOutput],
    "view"
  >;

  getSubscriptionToken: TypedContractMethod<
    [subscriptionId: BytesLike],
    [string],
    "view"
  >;

  getSupportedTokens: TypedContractMethod<[], [string[]], "view">;

  isSubscriptionActive: TypedContractMethod<
    [subscriptionId: BytesLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pauseSubscription: TypedContractMethod<
    [subscriptionId: BytesLike, signature: BytesLike],
    [void],
    "nonpayable"
  >;

  removeSupportedToken: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  resumeSubscription: TypedContractMethod<
    [subscriptionId: BytesLike, signature: BytesLike],
    [void],
    "nonpayable"
  >;

  subscriptionToken: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  subscriptions: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        bigint
      ] & {
        subscriber: string;
        merchant: string;
        amount: bigint;
        interval: bigint;
        startTime: bigint;
        maxPayments: bigint;
        maxTotalAmount: bigint;
        expiry: bigint;
        nonce: bigint;
        token: string;
        status: bigint;
      }
    ],
    "view"
  >;

  supportedTokens: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  verifyIntent: TypedContractMethod<
    [
      intent: SubscriptionManager.SubscriptionIntentStruct,
      signature: BytesLike
    ],
    [[boolean, string] & { valid: boolean; signer: string }],
    "view"
  >;

  withdrawUnusedETH: TypedContractMethod<
    [subscriptionId: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "PAUSE_REQUEST_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PROTOCOL_FEE_BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "RELAYER_REGISTRY"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "RESUME_REQUEST_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SUBSCRIPTION_INTENT_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "activeSubscriptionCounts"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "addSupportedToken"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cancelSubscription"
  ): TypedContractMethod<[subscriptionId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createSubscription"
  ): TypedContractMethod<
    [
      intent: SubscriptionManager.SubscriptionIntentStruct,
      signature: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "currentNonce"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "depositForSubscription"
  ): TypedContractMethod<[subscriptionId: BytesLike], [void], "payable">;
  getFunction(
    nameOrSignature: "ethDeposits"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "executeSubscription"
  ): TypedContractMethod<
    [subscriptionId: BytesLike, relayer: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executedPayments"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNextNonce"
  ): TypedContractMethod<[_subscriber: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNextPaymentTime"
  ): TypedContractMethod<[subscriptionId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPaymentCount"
  ): TypedContractMethod<[subscriptionId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSubscription"
  ): TypedContractMethod<
    [subscriptionId: BytesLike],
    [SubscriptionManager.SubscriptionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSubscriptionToken"
  ): TypedContractMethod<[subscriptionId: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getSupportedTokens"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "isSubscriptionActive"
  ): TypedContractMethod<[subscriptionId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pauseSubscription"
  ): TypedContractMethod<
    [subscriptionId: BytesLike, signature: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeSupportedToken"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resumeSubscription"
  ): TypedContractMethod<
    [subscriptionId: BytesLike, signature: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "subscriptionToken"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "subscriptions"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        bigint
      ] & {
        subscriber: string;
        merchant: string;
        amount: bigint;
        interval: bigint;
        startTime: bigint;
        maxPayments: bigint;
        maxTotalAmount: bigint;
        expiry: bigint;
        nonce: bigint;
        token: string;
        status: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "supportedTokens"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "verifyIntent"
  ): TypedContractMethod<
    [
      intent: SubscriptionManager.SubscriptionIntentStruct,
      signature: BytesLike
    ],
    [[boolean, string] & { valid: boolean; signer: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawUnusedETH"
  ): TypedContractMethod<[subscriptionId: BytesLike], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PaymentExecuted"
  ): TypedContractEvent<
    PaymentExecutedEvent.InputTuple,
    PaymentExecutedEvent.OutputTuple,
    PaymentExecutedEvent.OutputObject
  >;
  getEvent(
    key: "PaymentFailed"
  ): TypedContractEvent<
    PaymentFailedEvent.InputTuple,
    PaymentFailedEvent.OutputTuple,
    PaymentFailedEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionCancelled"
  ): TypedContractEvent<
    SubscriptionCancelledEvent.InputTuple,
    SubscriptionCancelledEvent.OutputTuple,
    SubscriptionCancelledEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionCreated"
  ): TypedContractEvent<
    SubscriptionCreatedEvent.InputTuple,
    SubscriptionCreatedEvent.OutputTuple,
    SubscriptionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionPaused"
  ): TypedContractEvent<
    SubscriptionPausedEvent.InputTuple,
    SubscriptionPausedEvent.OutputTuple,
    SubscriptionPausedEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionResumed"
  ): TypedContractEvent<
    SubscriptionResumedEvent.InputTuple,
    SubscriptionResumedEvent.OutputTuple,
    SubscriptionResumedEvent.OutputObject
  >;
  getEvent(
    key: "TokenAdded"
  ): TypedContractEvent<
    TokenAddedEvent.InputTuple,
    TokenAddedEvent.OutputTuple,
    TokenAddedEvent.OutputObject
  >;
  getEvent(
    key: "TokenRemoved"
  ): TypedContractEvent<
    TokenRemovedEvent.InputTuple,
    TokenRemovedEvent.OutputTuple,
    TokenRemovedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PaymentExecuted(bytes32,address,address,address,uint256,uint256,uint256,address)": TypedContractEvent<
      PaymentExecutedEvent.InputTuple,
      PaymentExecutedEvent.OutputTuple,
      PaymentExecutedEvent.OutputObject
    >;
    PaymentExecuted: TypedContractEvent<
      PaymentExecutedEvent.InputTuple,
      PaymentExecutedEvent.OutputTuple,
      PaymentExecutedEvent.OutputObject
    >;

    "PaymentFailed(bytes32,address,address,uint256,string)": TypedContractEvent<
      PaymentFailedEvent.InputTuple,
      PaymentFailedEvent.OutputTuple,
      PaymentFailedEvent.OutputObject
    >;
    PaymentFailed: TypedContractEvent<
      PaymentFailedEvent.InputTuple,
      PaymentFailedEvent.OutputTuple,
      PaymentFailedEvent.OutputObject
    >;

    "SubscriptionCancelled(bytes32,address,address)": TypedContractEvent<
      SubscriptionCancelledEvent.InputTuple,
      SubscriptionCancelledEvent.OutputTuple,
      SubscriptionCancelledEvent.OutputObject
    >;
    SubscriptionCancelled: TypedContractEvent<
      SubscriptionCancelledEvent.InputTuple,
      SubscriptionCancelledEvent.OutputTuple,
      SubscriptionCancelledEvent.OutputObject
    >;

    "SubscriptionCreated(bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      SubscriptionCreatedEvent.InputTuple,
      SubscriptionCreatedEvent.OutputTuple,
      SubscriptionCreatedEvent.OutputObject
    >;
    SubscriptionCreated: TypedContractEvent<
      SubscriptionCreatedEvent.InputTuple,
      SubscriptionCreatedEvent.OutputTuple,
      SubscriptionCreatedEvent.OutputObject
    >;

    "SubscriptionPaused(bytes32,address)": TypedContractEvent<
      SubscriptionPausedEvent.InputTuple,
      SubscriptionPausedEvent.OutputTuple,
      SubscriptionPausedEvent.OutputObject
    >;
    SubscriptionPaused: TypedContractEvent<
      SubscriptionPausedEvent.InputTuple,
      SubscriptionPausedEvent.OutputTuple,
      SubscriptionPausedEvent.OutputObject
    >;

    "SubscriptionResumed(bytes32,address)": TypedContractEvent<
      SubscriptionResumedEvent.InputTuple,
      SubscriptionResumedEvent.OutputTuple,
      SubscriptionResumedEvent.OutputObject
    >;
    SubscriptionResumed: TypedContractEvent<
      SubscriptionResumedEvent.InputTuple,
      SubscriptionResumedEvent.OutputTuple,
      SubscriptionResumedEvent.OutputObject
    >;

    "TokenAdded(address)": TypedContractEvent<
      TokenAddedEvent.InputTuple,
      TokenAddedEvent.OutputTuple,
      TokenAddedEvent.OutputObject
    >;
    TokenAdded: TypedContractEvent<
      TokenAddedEvent.InputTuple,
      TokenAddedEvent.OutputTuple,
      TokenAddedEvent.OutputObject
    >;

    "TokenRemoved(address)": TypedContractEvent<
      TokenRemovedEvent.InputTuple,
      TokenRemovedEvent.OutputTuple,
      TokenRemovedEvent.OutputObject
    >;
    TokenRemoved: TypedContractEvent<
      TokenRemovedEvent.InputTuple,
      TokenRemovedEvent.OutputTuple,
      TokenRemovedEvent.OutputObject
    >;
  };
}
