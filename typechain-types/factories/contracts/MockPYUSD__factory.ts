/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { MockPYUSD, MockPYUSDInterface } from "../../contracts/MockPYUSD";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040518060400160405280600a81526020016914185e54185b081554d160b21b8152506040518060400160405280600581526020016414165554d160da1b815250816003908161006191906102b1565b50600461006e82826102b1565b50506005805460ff191660069081179091556100a49150339061009290600a61046e565b61009f90620f4240610484565b6100a9565b6104ae565b6001600160a01b0382166100d85760405163ec442f0560e01b8152600060048201526024015b60405180910390fd5b6100e4600083836100e8565b5050565b6001600160a01b038316610113578060026000828254610108919061049b565b909155506101859050565b6001600160a01b038316600090815260208190526040902054818110156101665760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016100cf565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b0382166101a1576002805482900390556101c0565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161020591815260200190565b60405180910390a3505050565b634e487b7160e01b600052604160045260246000fd5b600181811c9082168061023c57607f821691505b60208210810361025c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156102ac57806000526020600020601f840160051c810160208510156102895750805b601f840160051c820191505b818110156102a95760008155600101610295565b50505b505050565b81516001600160401b038111156102ca576102ca610212565b6102de816102d88454610228565b84610262565b6020601f82116001811461031257600083156102fa5750848201515b600019600385901b1c1916600184901b1784556102a9565b600084815260208120601f198516915b828110156103425787850151825560209485019460019092019101610322565b50848210156103605786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b6001815b60018411156103c0578085048111156103a4576103a461036f565b60018416156103b257908102905b60019390931c928002610389565b935093915050565b6000826103d757506001610468565b816103e457506000610468565b81600181146103fa576002811461040457610420565b6001915050610468565b60ff8411156104155761041561036f565b50506001821b610468565b5060208310610133831016604e8410600b8410161715610443575081810a610468565b6104506000198484610385565b80600019048211156104645761046461036f565b0290505b92915050565b600061047d60ff8416836103c8565b9392505050565b80820281158282048414176104685761046861036f565b808201808211156104685761046861036f565b61078c806104bd6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806340c10f191161006657806340c10f191461011e57806370a082311461013357806395d89b411461015c578063a9059cbb14610164578063dd62ed3e1461017757600080fd5b806306fdde03146100a3578063095ea7b3146100c157806318160ddd146100e457806323b872dd146100f6578063313ce56714610109575b600080fd5b6100ab6101b0565b6040516100b891906105d5565b60405180910390f35b6100d46100cf36600461063f565b610242565b60405190151581526020016100b8565b6002545b6040519081526020016100b8565b6100d4610104366004610669565b61025c565b60055460405160ff90911681526020016100b8565b61013161012c36600461063f565b610280565b005b6100e86101413660046106a6565b6001600160a01b031660009081526020819052604090205490565b6100ab61028e565b6100d461017236600461063f565b61029d565b6100e86101853660046106c8565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101bf906106fb565b80601f01602080910402602001604051908101604052809291908181526020018280546101eb906106fb565b80156102385780601f1061020d57610100808354040283529160200191610238565b820191906000526020600020905b81548152906001019060200180831161021b57829003601f168201915b5050505050905090565b6000336102508185856102ab565b60019150505b92915050565b60003361026a8582856102bd565b610275858585610341565b506001949350505050565b61028a82826103a0565b5050565b6060600480546101bf906106fb565b600033610250818585610341565b6102b883838360016103d6565b505050565b6001600160a01b0383811660009081526001602090815260408083209386168352929052205460001981101561033b578181101561032c57604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064015b60405180910390fd5b61033b848484840360006103d6565b50505050565b6001600160a01b03831661036b57604051634b637e8f60e11b815260006004820152602401610323565b6001600160a01b0382166103955760405163ec442f0560e01b815260006004820152602401610323565b6102b88383836104ab565b6001600160a01b0382166103ca5760405163ec442f0560e01b815260006004820152602401610323565b61028a600083836104ab565b6001600160a01b0384166104005760405163e602df0560e01b815260006004820152602401610323565b6001600160a01b03831661042a57604051634a1406b160e11b815260006004820152602401610323565b6001600160a01b038085166000908152600160209081526040808320938716835292905220829055801561033b57826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161049d91815260200190565b60405180910390a350505050565b6001600160a01b0383166104d65780600260008282546104cb9190610735565b909155506105489050565b6001600160a01b038316600090815260208190526040902054818110156105295760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401610323565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b03821661056457600280548290039055610583565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516105c891815260200190565b60405180910390a3505050565b602081526000825180602084015260005b8181101561060357602081860181015160408684010152016105e6565b506000604082850101526040601f19601f83011684010191505092915050565b80356001600160a01b038116811461063a57600080fd5b919050565b6000806040838503121561065257600080fd5b61065b83610623565b946020939093013593505050565b60008060006060848603121561067e57600080fd5b61068784610623565b925061069560208501610623565b929592945050506040919091013590565b6000602082840312156106b857600080fd5b6106c182610623565b9392505050565b600080604083850312156106db57600080fd5b6106e483610623565b91506106f260208401610623565b90509250929050565b600181811c9082168061070f57607f821691505b60208210810361072f57634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561025657634e487b7160e01b600052601160045260246000fdfea2646970667358221220a258f3422b2285f33f7c78ed3ea5719f2618a6e5616bf8322788f5e3a9269a4764736f6c634300081c0033";

type MockPYUSDConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockPYUSDConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockPYUSD__factory extends ContractFactory {
  constructor(...args: MockPYUSDConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockPYUSD & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockPYUSD__factory {
    return super.connect(runner) as MockPYUSD__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockPYUSDInterface {
    return new Interface(_abi) as MockPYUSDInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockPYUSD {
    return new Contract(address, _abi, runner) as unknown as MockPYUSD;
  }
}
